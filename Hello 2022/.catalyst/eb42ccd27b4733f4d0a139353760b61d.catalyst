{"title":{"en":"A. Ancient Civilization","ru":"A. Древняя цивилизация"},"contestId":"1625","problemIndex":"A","timeLimit":{"en":"1 second","ru":"1 секунда"},"memLimit":{"en":"256 megabytes","ru":"256 мегабайт"},"inputFormat":{"en":"standard input","ru":"стандартный ввод"},"outputFormat":{"en":"standard output","ru":"стандартный вывод"},"problemHtml":{"en":"<p>Martian scientists explore Ganymede, one of Jupiter's numerous moons. Recently, they have found ruins of an ancient civilization. The scientists brought to Mars some tablets with writings in a language unknown to science.</p><p>They found out that the inhabitants of Ganymede used an alphabet consisting of two letters, and each word was exactly $$$\\ell$$$ letters long. So, the scientists decided to write each word of this language as an integer from $$$0$$$ to $$$2^{\\ell} - 1$$$ inclusively. The first letter of the alphabet corresponds to zero bit in this integer, and the second letter corresponds to one bit.</p><p>The same word may have various forms in this language. Then, you need to restore the initial form. The process of doing it is described below.</p><p>Denote the <span class=\"tex-font-style-it\">distance</span> between two words as the amount of positions, in which these words differ. For example, the distance between $$$1001_2$$$ and $$$1100_2$$$ (in binary) is equal to two, as these words have different letters in the second and the fourth positions, counting from left to right. Further, denote the distance between words $$$x$$$ and $$$y$$$ as $$$d(x, y)$$$.</p><p>Let the word have $$$n$$$ forms, the $$$i$$$-th of which is described with an integer $$$x_i$$$. All the $$$x_i$$$ are not necessarily different, as two various forms of the word can be written the same. Consider some word $$$y$$$. Then, <span class=\"tex-font-style-it\">closeness</span> of the word $$$y$$$ is equal to the sum of distances to each of the word forms, i.&nbsp;e. the sum $$$d(x_i, y)$$$ over all $$$1 \\le i \\le n$$$.</p><p>The initial form is the word $$$y$$$ with minimal possible nearness.</p><p>You need to help the scientists and write the program which finds the initial form of the word given all its known forms. Note that the initial form is <span class=\"tex-font-style-bf\">not necessarily</span> equal to any of the $$$n$$$ given forms.</p>","ru":"<p>Марсианские ученые исследуют Ганимед, один из многочисленных спутников Юпитера. Недавно на нем были обнаружены руины древней цивилизации. Ученые доставили на Марс несколько табличек с надписями на неизвестном науке языке.</p><p>Было установлено, что жители Ганимеда использовали алфавит из двух букв, причем каждое слово имело фиксированную длину&nbsp;— ровно $$$\\ell$$$ букв. Поэтому ученые решили записывать каждое слово этого языка как целое положительное число от $$$0$$$ до $$$2^{\\ell} - 1$$$. Первой букве алфавита соответствуют нули в двоичной записи числа, а второй букве алфавита&nbsp;— единицы.</p><p>Одно и то же слово может иметь в языке разные формы. Тогда необходимо восстановить начальную форму слова. Ниже описано, как это делается.</p><p>Назовем <span class=\"tex-font-style-it\">расстоянием</span> между двумя словами количество позиций, в которых эти слова различаются. Например, расстояние между словами $$$1001_2$$$ и $$$1100_2$$$ (в двоичной записи) равно двум, т.&nbsp;к. они имеют разные буквы на второй и четвертой позициях, если считать слева направо. Будем в дальнейшем обозначать расстояние между словами $$$x$$$ и $$$y$$$ как $$$d(x, y)$$$.</p><p>Пусть слово имеет $$$n$$$ форм, $$$i$$$-я из которых описывается целым числом $$$x_i$$$. Все $$$x_i$$$ не обязательно различны, т.&nbsp;к. две разные формы слова могут записываться одинаково. Рассмотрим некоторое слово $$$y$$$. Тогда <span class=\"tex-font-style-it\">близость</span> слова $$$y$$$ равна сумме расстояний до каждой из форм исследуемого слова, т.&nbsp;е. сумме $$$d(x_i, y)$$$ по всем $$$1 \\le i \\le n$$$.</p><p>Начальной формой является слово $$$y$$$ с минимально возможной близостью.</p><p>Вам необходимо помочь ученым и написать программу, которая находит начальную форму слова по всем его известным формам. Обратите внимание, что начальная форма <span class=\"tex-font-style-bf\">не обязательно</span> должна совпадать с какой-либо из известных $$$n$$$ форм слова.</p>"},"inSpecsHtml":{"en":"<div class=\"section-title\">Input</div><p>The first line contains an integer $$$t$$$ ($$$1 \\le t \\le 100$$$) — the number of test cases. The following are descriptions of the test cases.</p><p>The first line contains two integers $$$n$$$ and $$$\\ell$$$ ($$$1 \\le n \\le 100$$$, $$$1 \\le \\ell \\le 30$$$) — the amount of word forms, and the number of letters in one word.</p><p>The second line contains $$$n$$$ integers $$$x_i$$$ ($$$0 \\le x_i \\le 2^\\ell - 1$$$) — word forms. The integers are not necessarily different.</p>","ru":"<div class=\"section-title\">Входные данные</div><p>В первой строке входных данных находится целое число $$$t$$$ ($$$1 \\le t \\le 100$$$)&nbsp;— количество наборов входных данных. Далее следуют описания наборов входных данных.</p><p>В первой строке каждого набора входных данных находится два целых числа $$$n$$$ и $$$\\ell$$$ ($$$1 \\le n \\le 100$$$, $$$1 \\le \\ell \\le 30$$$)&nbsp;— количество форм слова и количество букв в одной форме.</p><p>Во второй строке каждого набора входных данных находится $$$n$$$ целых чисел $$$x_i$$$ ($$$0 \\le x_i \\le 2^\\ell - 1$$$)&nbsp;— формы слова. Числа не обязательно являются различными.</p>"},"outSpecsHtml":{"en":"<div class=\"section-title\">Output</div><p>For each test, print a single integer, the initial form of the word, i.&nbsp;e. such $$$y$$$ ($$$0 \\le y \\le 2^\\ell - 1$$$) that the sum $$$d(x_i, y)$$$ over all $$$1 \\le i \\le n$$$ is minimal possible. Note that $$$y$$$ can differ from all the integers $$$x_i$$$.</p><p>If there are multiple ways to restore the initial form, print any.</p>","ru":"<div class=\"section-title\">Выходные данные</div><p>Для каждого теста выведите одно целое число&nbsp;— начальную форму слова, т.&nbsp;е. такое $$$y$$$ ($$$0 \\le y \\le 2^\\ell - 1$$$), что сумма $$$d(x_i, y)$$$ по всем $$$1 \\le i \\le n$$$ минимально возможная. Обратите внимание, что $$$y$$$ не обязано совпадать с каким-либо числом из $$$x_i$$$.</p><p>Если вариантов восстановить начальную форму слова несколько, выведите любой из них.</p>"},"noteHtml":{"en":"<div class=\"section-title\">Note</div><p>In the first test case, the words can be written as $$$x_1 = 10010_2$$$, $$$x_2 = 01001_2$$$ and $$$x_3 = 10101_2$$$ in binary. Let $$$y = 10001_2$$$. Then, $$$d(x_1, y) = 2$$$ (the difference is in the fourth and the fifth positions), $$$d(x_2, y) = 2$$$ (the difference is in the first and the second positions), $$$d(x_3, y) = 1$$$ (the difference is in the third position). So, the closeness is $$$2 + 2 + 1 = 5$$$. It can be shown that you cannot achieve smaller closeness.</p><p>In the second test case, all the forms are equal to $$$18$$$ ($$$10010_2$$$ in binary), so the initial form is also $$$18$$$. It's easy to see that closeness is equal to zero in this case.</p>","ru":"<div class=\"section-title\">Примечание</div><p>Рассмотрим примеры из условия.</p><p>В первом примере слова в двоичной записи записываются как $$$x_1 = 10010_2$$$, $$$x_2 = 01001_2$$$ и $$$x_3 = 10101_2$$$. Пусть $$$y = 10001_2$$$. Тогда $$$d(x_1, y) = 2$$$ (различие в четвертой и пятой позиции), $$$d(x_2, y) = 2$$$ (различие в первой и второй позиции), $$$d(x_3, y) = 1$$$ (различие в третьей позиции). Получаем, что близость равна $$$2 + 2 + 1 = 5$$$. Можно показать, что меньшего значения близости добиться невозможно. </p><p>Во втором примере все формы слова одинаковы и равны $$$18$$$ ($$$10010_2$$$ в двоичной записи), поэтому начальная форма тоже равна $$$18$$$. Как нетрудно догадаться, близость в таком случае равна нулю.</p>"},"sampleTestcases":[{"id":1641989249274,"input":"7\n3 5\n18 9 21\n3 5\n18 18 18\n1 1\n1\n5 30\n1 2 3 4 5\n6 10\n99 35 85 46 78 55\n2 1\n0 1\n8 8\n5 16 42 15 83 65 78 42\n","output":"17\n18\n1\n1\n39\n0\n2\n","result":{"id":1641989249274,"stdout":"17\r\n18\r\n1\r\n1\r\n39\r\n0\r\n2\r\n","stderr":"","exitcode":0,"signal":null,"time":84,"timeout":false}}],"submitUrl":"https://codeforces.com/contest/1625/submit","language":"c++","isPartOfContest":true,"langId":"54"}